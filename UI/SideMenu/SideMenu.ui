
template SideMenu {
        
    state GameData gameData = $runtime.GetService<GameData>();

    // this is the top-left character avatar, which in this app just the frame and it's background
    Div(style = [@avatar]) {
        Div(style = [@avatar-bg]);
        Div(style = [@avatar-frame]);
    }
    
    // the toggle group decorator ensures only one element is selected
    // it handles applying a 'selected' attribute to whichever child is selected. 
    // this works because SideMenuButton's template is marked with the @ToggleControl decorator.
    
    // we pick our selected element based on which screen we have selected which is read out of gameData.
    // finally we 'extrude' a reference to the selected element so we can use it in the run statement below
    @ToggleGroup(selectedIndex = (int)gameData.currentScreen) [selectedElement]  
    Div(style = [@button-group]) { 
        
        SideMenuButton(`Main_menu_icon_01`, screenId = ScreenId.Home);
        SideMenuButton(`Main_menu_icon_02`, screenId = ScreenId.Heroes);
        SideMenuButton(`Main_menu_icon_03`, screenId = ScreenId.Resources);
        SideMenuButton(`Main_menu_icon_04`, screenId = ScreenId.Shop);
        SideMenuButton(`Main_menu_icon_05`, screenId = ScreenId.Mail);
        
        // we can get a reference to a given element with the 'element assignment' operator
        element runner = Div(style = [@selected-runner]);
        
        // set the selection indicator's margin top to be local layout y of the selected element 
        run runner.style.SetMarginTop(selectedElement.GetLayoutLocalPosition().y);       
    }
    
}